// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package client_sdk_go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScsControlClient is the client API for ScsControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScsControlClient interface {
	CreateCache(ctx context.Context, in *CreateCacheRequest, opts ...grpc.CallOption) (*CreateCacheResponse, error)
	DeleteCache(ctx context.Context, in *DeleteCacheRequest, opts ...grpc.CallOption) (*DeleteCacheResponse, error)
	ListCaches(ctx context.Context, in *ListCachesRequest, opts ...grpc.CallOption) (*ListCachesResponse, error)
}

type scsControlClient struct {
	cc grpc.ClientConnInterface
}

func NewScsControlClient(cc grpc.ClientConnInterface) ScsControlClient {
	return &scsControlClient{cc}
}

func (c *scsControlClient) CreateCache(ctx context.Context, in *CreateCacheRequest, opts ...grpc.CallOption) (*CreateCacheResponse, error) {
	out := new(CreateCacheResponse)
	err := c.cc.Invoke(ctx, "/control_client.ScsControl/CreateCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsControlClient) DeleteCache(ctx context.Context, in *DeleteCacheRequest, opts ...grpc.CallOption) (*DeleteCacheResponse, error) {
	out := new(DeleteCacheResponse)
	err := c.cc.Invoke(ctx, "/control_client.ScsControl/DeleteCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsControlClient) ListCaches(ctx context.Context, in *ListCachesRequest, opts ...grpc.CallOption) (*ListCachesResponse, error) {
	out := new(ListCachesResponse)
	err := c.cc.Invoke(ctx, "/control_client.ScsControl/ListCaches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScsControlServer is the server API for ScsControl service.
// All implementations must embed UnimplementedScsControlServer
// for forward compatibility
type ScsControlServer interface {
	CreateCache(context.Context, *CreateCacheRequest) (*CreateCacheResponse, error)
	DeleteCache(context.Context, *DeleteCacheRequest) (*DeleteCacheResponse, error)
	ListCaches(context.Context, *ListCachesRequest) (*ListCachesResponse, error)
	mustEmbedUnimplementedScsControlServer()
}

// UnimplementedScsControlServer must be embedded to have forward compatible implementations.
type UnimplementedScsControlServer struct {
}

func (UnimplementedScsControlServer) CreateCache(context.Context, *CreateCacheRequest) (*CreateCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCache not implemented")
}
func (UnimplementedScsControlServer) DeleteCache(context.Context, *DeleteCacheRequest) (*DeleteCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCache not implemented")
}
func (UnimplementedScsControlServer) ListCaches(context.Context, *ListCachesRequest) (*ListCachesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCaches not implemented")
}
func (UnimplementedScsControlServer) mustEmbedUnimplementedScsControlServer() {}

// UnsafeScsControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScsControlServer will
// result in compilation errors.
type UnsafeScsControlServer interface {
	mustEmbedUnimplementedScsControlServer()
}

func RegisterScsControlServer(s grpc.ServiceRegistrar, srv ScsControlServer) {
	s.RegisterService(&ScsControl_ServiceDesc, srv)
}

func _ScsControl_CreateCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsControlServer).CreateCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_client.ScsControl/CreateCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsControlServer).CreateCache(ctx, req.(*CreateCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScsControl_DeleteCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsControlServer).DeleteCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_client.ScsControl/DeleteCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsControlServer).DeleteCache(ctx, req.(*DeleteCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScsControl_ListCaches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCachesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsControlServer).ListCaches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_client.ScsControl/ListCaches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsControlServer).ListCaches(ctx, req.(*ListCachesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScsControl_ServiceDesc is the grpc.ServiceDesc for ScsControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScsControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "control_client.ScsControl",
	HandlerType: (*ScsControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCache",
			Handler:    _ScsControl_CreateCache_Handler,
		},
		{
			MethodName: "DeleteCache",
			Handler:    _ScsControl_DeleteCache_Handler,
		},
		{
			MethodName: "ListCaches",
			Handler:    _ScsControl_ListCaches_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/controlclient.proto",
}
